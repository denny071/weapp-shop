<style lang="less">
.setting {

}

.list_block {
  padding-top: 20rpx;
}

.item_bock {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 40rpx 25rpx;
  border-bottom: 1px solid #f7f7f7;
  background: #fff;
}

.title {
  color: #808080;
  font-size: 32rpx;
}

.item_content {
  font-size: 32rpx;
  color: #333333;
}
.avatar-wrap {
  position: relative;
  margin-right: 10px;
}
.avatar {
  width: 50px;
  height: 50px;
  display: block;
  border-radius: 50%;
}
</style>
<!--我的消息-->
<template>
  <view class="setting">
    <scroll-view scroll-y="true" class="swiper-item-box">
      <view class="list_block">
        <view class="item_bock">
          <view class="title">头像</view>
          <view class="item_content">  <image class="avatar" src="{{userInfo.avatar}}"  @tap="updateAvatar" /></view>
        </view>
        <view class="item_bock">
          <view class="title">昵称</view>
          <view class="item_content">{{userInfo.name}}</view>
        </view>
        <view class="item_bock">
          <view class="title">我的手机</view>
          <navigator class="item_content"  url="/pages/mobile">{{userInfo.phone|| '未设置'}} &gt;</navigator>
        </view>
        <view class="item_bock">
          <view class="title">收货地址</view>
          <navigator class="item_content" url="/pages/address">更改地址 &gt;</navigator>
        </view>
      </view>
  </scroll-view>
  </view>
</template>
<script>
import wepy from 'wepy';
import api from '@/api/api';
import {
  SYSTEM_INFO,
  USER_SPECICAL_INFO
} from '@/utils/constant';
import regeneratorRuntime from '@/utils/runtime.js'
export default class Messages extends wepy.page {
  config = {
    navigationBarTitleText: '设置',
  }
  components = {
  }
  data = {
    userInfo: {},
    winHeight: 0,
    phone:""
  }
  async getUserInfo(phone,code) {
    let that = this;
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let openid = userSpecialInfo.openid;
    const json = await api.user({
      query: {
        openid: openid
      }
    });
    if (json.statusCode == 200) {
      this.userInfo=json.data;
      that.$apply();
    } else {
      tip.error(json.data.msg)
    }
    that.showLoading = false;
  }
  onLoad() {
    let that = this;

    //设置滚动高度
    let systemInfo = wepy.getStorageSync(SYSTEM_INFO);
    that.winHeight = systemInfo.windowHeight;
    this.getUserInfo();
  }
  async updateImage() {
    let that = this;
    let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
    let openid = userSpecialInfo.openid;
    let image = await wepy.chooseImage()
    try {

      let avatar = image.tempFilePaths[0]
      let json = await wepy.uploadFile({
        url: api.apiMall + '/avatar',
        method: 'POST',
        name: 'image',
        formData: {
          type: 'avatar',
          openid:openid
        },
        filePath: avatar
      })
      if (json.statusCode === 201) {
        // 小程序上传结果没有做 JSON.parse，需要手动处理
        let responseData = JSON.parse(json.data)
        that.userInfo.avatar = responseData.path
        that.$apply()
      }
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误，请联系管理员'
      })
    }
  }

  computed = {
  }
  methods = {
    updateAvatar(){
      this.updateImage();
  }

  }
  events = {

  }

}

</script>
