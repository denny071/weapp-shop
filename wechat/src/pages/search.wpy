<template>
  <scroll-view class="container"  scroll-y="true" bindscrolltolower="onReachBottom" style="height: {{winHeight}}px">
    <search @searchValue.user="doSearch"></search>
    <filterBar @currentType.user="currentType" :properties.sync="properties" :isFilter.sync="is_filter" ></filterBar>
    <view  wx:if="{{list.length>0}}" class="{{show_search?'hidden':''}}"  >
      <!--矩阵商品列表模块-->
      <shopGridList :show.sync="!is_empty" :list.sync="list" ></shopGridList>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
    </view>
    <view wx:else>
      <!--暂无数据显示-->
      <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    </view>

    <view class="history {{show_search?'':'hidden'}}">
      <view class="doc">历史记录</view>
      <view class="lable">
        <view wx:for="{{keywordhisList}}" wx:key="item"  >
          <view class="child" data-word="{{item.word}}" @tap.stop="selHisKeyWord">{{item.word}}</view>
        </view>
      </view>
      <view class="btn_box">
        <view class="button type_empity" @tap.stop="clearHis">清除历史记录</view>
      </view>
    </view>
  </scroll-view>
</template>

<script>
  import wepy from 'wepy';
  import api from '@/api/api';
  import tip from '@/utils/tip'
  import {
    SYSTEM_INFO,
    USER_SPECICAL_INFO
  } from '@/utils/constant';
  import Searchs from '@/components/search'
  import FilterBar from "../components/filter_bar"
  import ShopGridList from '@/components/shop_grid_list'
  import BottomLoadMore from "../components/common/bottomLoadMore"
  import Placeholder from "../components/common/placeholder"
  import FilterSlider from '@/components/filterSlider'
  import regeneratorRuntime from '@/utils/runtime.js'
  export default class Search extends wepy.page {
    config = {
      navigationBarTitleText: '搜索',
    }
    components = {
      search: Searchs,
      filterBar: FilterBar,
      filterSlider: FilterSlider,
      shopGridList: ShopGridList,
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder
    }
    data = {
      winHeight:0,
      list: [],
      properties: [],
      selectItem: [],
      showLoading: false,
      purchasetype: 1,
      is_empty: false,
      is_filter:false,
      //当前页面
      currentPage: 1,
      //总页数
      page_total: 0,
      keyword: "",
      keywordhisList: [],
      cateCode: "",
      show_search: true,
      sort: -1,
      title: "",
      skuval: ""
    }
    // 获得关键词列表
    async getKeyWordHisList() {
      let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      let openid = userSpecialInfo.openid;
      const json = await api.searchWord({
        query: {
          openid: openid
        }
      });
      if (json.statusCode == 200) {
        this.keywordhisList = json.data.data;
      }
      this.$apply();
    }
    // 添加关键词
    async addKeyWord(keyWord) {
      let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      let openid = userSpecialInfo.openid;
      const json = await api.searchWord({
        method:"POST",
        query: {
          openid: openid,
          word: keyWord,
        }
      });
      if (json.statusCode == 200) {
        this.keywordhisList = json.data.data;
      }
      this.$apply();
    }
    // 初始化页面
    onLoad(option) {
      this.list = [];
      this.category_id = option.category_id;

      if (this.category_id != undefined && this.category_id.length > 0) { //分类进入
        this.$invoke('search', 'show', "0");
        this.show_search = false;
        this.doSearchGoods();
        this.title = "" + option.category_name;
        wepy.setNavigationBarTitle({
          title: this.title
        })
      } else { //搜索进入
        this.$invoke('search', 'show', "1");
        this.show_search = true;
        this.getKeyWordHisList();
      }

      let systemInfo = wepy.getStorageSync(SYSTEM_INFO);
      this.winHeight = systemInfo.windowHeight;
    }
    // 搜索商品
    async doSearchGoods(keyword, currentPage, size) {
      let that = this;
      that.showLoading = true;
      let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      let openid = userSpecialInfo.openid;
      const json = await api.productList({
        query: {
          openid:openid,
          page: currentPage || 1,
          size: size || 2,
          search: this.keyword,
          category_id: this.category_id || "",
          order: this.sort,
          filters:that.selectItem.join("|"),
        }
      });
      if (json.statusCode == 200) {
        that.list = [...that.list, ...json.data.data]
        // 处理属性数组
        json.data.meta.properties.forEach((item, index)=>{
          let dataList = json.data.meta.properties[index].dataList = []
          json.data.meta.properties[index].values.forEach((value) => {
            dataList.push({key:item.key+":"+value, val : value,selected : false})
          })
        })
        if (this.is_filter == false) {
          that.properties = json.data.meta.properties
        }


        that.page_total = json.data.meta.pagination.total_pages
        if (json.data.meta.pagination.total == 0) {
          //暂无数据
          that.is_empty = true;
        }
        that.show_search = false;
      } else {
        tip.error(json.data.msg);
      }
      if (keyword) {
        this.addKeyWord(keyword)
      }
      that.showLoading = false;
      that.$apply();
    }
    // 清空用户关键词
    async clearUserKeywords() {
      let userSpecialInfo = wepy.getStorageSync(USER_SPECICAL_INFO) || {};
      let openid = userSpecialInfo.openid;
      const json = await api.searchWord({
        method:"DELETE",
        query: {
          openid: openid
        }
      });

      if (json.statusCode == 204) {
        this.keywordhisList = [];
      } else {
        tip.error(json.data.msg);
      }
      this.$apply();
    }
    methods = {
      // 搜索
      doSearch(val) {
        this.list = [];
        this.is_empty = false;
        this.showLoading = true;
        this.keyword = val;
        this.doSearchGoods(val);
      },
      // 当前排序
      currentType(obj) {
        var name = obj.name;
        var type = obj.type;
        console.log(name)
        if (name == "evaluation") {
          this.sort = "rating_desc";;
        } else if (name == "sale") {
          this.sort = "sold_count_desc";
        } else if (name == "price") {
          if (type == "desc") {
            this.sort = "price_desc";
          } else if (type == "asc") {
            this.sort = "price_asc";
          }
        } else if (name == "sku") {
          this.skuval = type;
        }
        this.list = [];
        this.is_empty = false;
        this.showLoading = true;
        this.show_search = false;
        this.doSearchGoods(this.keyword);
      },

      // 选择推荐词
      selHisKeyWord(e) {
        var keyword = e.currentTarget.dataset.word;
        this.list = [];
        this.is_empty = false;
        this.showLoading = true;
        this.keyword = keyword;
        this.$invoke('search', 'setText', keyword);
        this.doSearchGoods(keyword);
      },
      // 清空历史记录
      clearHis() {
        this.clearUserKeywords();
      },

      // 分享
      onShareAppMessage: function(res) {
        if (res.from === 'button') {
          // 来自页面内转发按钮
          console.log(res.target)
        }
        return {
          title: this.detail.name,
          path: '/pages/search?cateCode=' + this.cateCode + '&title=' + this.title,
          success: function(res) {
            // 转发成功
          },
          fail: function(res) {
            // 转发失败
          }
        }
      }
    }
    //加载更多
    onReachBottom() {
      let that = this;
      that.showLoading = true;
      //判断总页数是否大于翻页数
      if ((that.page_total) > that.currentPage) {
        //防止重复加载
        if (that.preventRepeatReuqest) {
          return true;
        }
        that.preventRepeatReuqest = true;
        that.currentPage++;
        that.doSearchGoods("", that.currentPage);
        that.preventRepeatReuqest = false;
      } else {
        that.showLoading = false;
      }
    }
    events = {
      selectItem(key){
        let flag = true;
        if (this.selectItem.includes(key)) {
          this.selectItem = this.selectItem.filter(function(item) {
               return item != key
           });
          flag = false
        } else {
          this.selectItem.push(key)
        }
        // 处理属性数组
        this.properties.forEach((item,index)=>{
          this.properties[index].dataList.forEach((value,i) => {
            if (value.key == key) {
              this.properties[index].dataList[i].selected = flag
            }
          })
        })
        this.$apply()
      },
      searchFilter(){
        this.list = []
        this.doSearchGoods()
        this.currentPage = 1
        this.is_filter = true
        this.$apply()
      },
      resetFilter(){
        this.selectItem = []
        this.is_filter = false
        // 处理属性数组
        this.properties.forEach((item,index)=>{
          this.properties[index].dataList.forEach((value,i) => {
              this.properties[index].dataList[i].selected = false
          })
        })
        this.doSearchGoods()
        this.$apply()
      }
    }
  }
</script>

<style lang="less">
  .history {
    padding: 20px 27px;
  }
  .doc {
    color: #999;
    font-size: 26rpx;
  }
  .lable {
    margin-top: 20rpx;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    margin-left: -20rpx;
    .child {
      background: #dedede;
      padding: 10rpx 20rpx;
      border-radius: 300rpx;
      margin-left: 20rpx;
      font-size: 26rpx;
      margin-top: 5rpx;
      color: #000;
    }
  }
  .btn_box {
    width: 377rpx;
    margin: 0 auto;
    padding-top: 88rpx;
    .button {
      color: #999;
    }
  }
  .active {
    border: 1px solid #f23737;
    color: #f23737;
  }
</style>
